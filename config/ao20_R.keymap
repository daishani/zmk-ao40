#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
        m0: m0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp O>;
            label = "M0";
        };

        m1: m1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp O>;
            label = "M1";
        };
    };

    behaviors {
        RShift_Del: RShift_Del {
            compatible = "zmk,behavior-tap-dance";
            label = "RSHIFT_DEL";
            #binding-cells = <0>;
            bindings = <&kt RSHFT>, <&kt DEL>;
        };
    };

    combos {
        compatible = "zmk,combos";

        RDEL {
            bindings = <&kp DEL>;
            key-positions = <14 19>;
            layers = <0>;
        };

        Rpoint {
            bindings = <&kp PERIOD>;
            key-positions = <5 15>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer1 {
            bindings = <
&kp ESC  &kp V  &kp NUMBER_1  &kp NUMBER_2  &to 1
&kp Y    &kp U  &kp I         &kp O         &kp P
&kp H    &kp J  &kp K         &kp L         &kp SEMI
&kp N    &kp M  &kp COMMA     &kp DOT       &kp FSLH
            >;
        };

        layer2 {
            bindings = <
&kp ESC  &to 2  &kp LEFT   &kp RIGHT  &to 0
&kp Q    &kp W  &kp E      &kp R      &kp UP
&kp A    &kp S  &kp D      &kp F      &kp DOWN
&kp Z    &kp X  &kp SPACE  &kp LSHFT  &kp TAB
            >;
        };

        layer3 {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&none         &none         &none         &none         &none
&none         &none         &none         &none         &none
&to 0         &none         &none         &none         &bt BT_CLR
            >;
        };

        layer4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
